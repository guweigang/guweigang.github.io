#+TITLE: 变量定义和声明
#+AUTHOR: Gu Weigang
#+EMAIL: guweigang@outlook.com
#+DATE: 2010-04-21 Wed
#+URI: /blog/2010/04/21/variable-definitions-and-declarations/
#+KEYWORDS: 
#+TAGS: 变量声明, 变量定义
#+LANGUAGE: zh_CN
#+OPTIONS: H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: 

参考：[[http://dev.csdn.net/article/78/78442.shtm][http://dev.csdn.net/article/78/78442.shtm]]
变量的定义（definitions）会为这个变量分配存储空间，并且可能会为其指定一个初始化的值。在程序里，一个变量必须有一个，也只能有一处定义（definitions）。

变量的声明（declarations）会将变量的类型和名称传达给程序。当然，定义（definitions）也是一种声明：当我们定义一个变量的时候，我们当然也声明了他的名称和类型。我们可以通过使用“extern”关键字来声明（declarations）一个变量，而不用定义（definitions）它。声明（declarations）的形式就是在对象（变量）的名字和类型前面，加上关键字“extern”:


#+BEGIN_EXAMPLE
    extern int i;   // declares but does not define i
int i;          //  declares and defines i

#+END_EXAMPLE



带“extern”关键字的语句属于声明（declarations），不是定义（definitions），他不会给变量分配内存。实际上，它是说明程序中的某处包含这个变量的定义。一个变量可以在程序中被声明（declarations）多次，但是只能被定义（definitions）一次。

声明（declarations）时你可以给变量初始化。但是一旦你这样做，那么这句话也就变成了定义（definitions），因为只有在定义（definitions）的时候才会为变量分配内存。初始化的时候必然要为初始值分配存储空间。如果你在声明（declarations）的时候同时初始化了变量，即便“extern”关键字存在，这个语句也会认为是定义（definitions）。


#+BEGIN_EXAMPLE
    extern double pi = 3.1416; // definition

#+END_EXAMPLE


不管有没有“extern”关键字存在，这条语句的作用也是定义（definitions）“pi”。变量已经被分配了内存，并且赋予了初始值。声明（declarations）只有在一种情况下可以被初始化，那就是当他被放置在函数外部的时候。

由于包含初始化的声明（declarations）语句会被认为是定义（definitions），所以如下的用法会被认为是错误的：


#+BEGIN_EXAMPLE
    extern double pi = 3.1416; // definition
double pi;                 // error: redefinition of pi

#+END_EXAMPLE


同样的，定义（definitions）后再使用同样的声明（declarations）也是错误的：


#+BEGIN_EXAMPLE
    extern double pi = 3.1416; // definition
extern double pi;          // ok: declaration not definition
extern double pi = 3.1416; // error: redefinition of pi

#+END_EXAMPLE


声明（declarations）和定义（definitions）之间的区别看似有些卖弄学问的嫌疑，但是其实是非常重要的。
在C++里，变量必须被定义一次，最多一次，至少一次，而且必须在使用前定义（definitions）或者声明（declarations）。

任何一个在多个文件中都要用到的变量都需要在没有其定义（definitions）的文件里对其进行声明（declarations）。在这样的情况下，一般一个文件会包含该变量的定义（definitions）。其他用到该变量的文件就会包含该变量的声明（declarations），而不是定义（definitions）。


