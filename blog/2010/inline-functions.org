#+TITLE: 内联函数
#+AUTHOR: Gu Weigang
#+EMAIL: guweigang@outlook.com
#+DATE: 2010-02-05 Fri
#+URI: /blog/2010/02/05/inline-functions/
#+KEYWORDS: 
#+TAGS: c, cpp, 内联函数
#+LANGUAGE: zh_CN
#+OPTIONS: H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: 

C++还支持另外一种用户自定义函数，即内联函数( inline function )。这类函数的定义步骤与一般函数不同，编译器对它们的处理也不一样。创建内联函数的最直接办法是使用inline关键字并在main()函数的前面定义它：


#+BEGIN_EXAMPLE
    
#include 
inline void fn()
{
     // function body
}
int main(void)
{
}

#+END_EXAMPLE


在类里面，内联方法的基本含义是在声明该方法的同时还对它进行定义：


#+BEGIN_EXAMPLE
    
class Person
{
public:
       Person(std::string name)
       {
          this->name = name;
       }
}
// ....

#+END_EXAMPLE


注意：内联函数不需要先为它定义一个原型，整个函数都在main()函数的前面定义。
内联函数有什么好处呢？先解释一下：
首先，当编译器编译代码时，它会自行判断是否要把一个函数当作内联函数来处理，而不管是否把它定义为内联函数。
其次，内联函数对程序性能的改善会受许多因素的影响，这取决于具体的函数、程序和运行环境


