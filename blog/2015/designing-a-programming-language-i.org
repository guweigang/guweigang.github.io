#+TITLE:       Designing a Programming Language: I
#+AUTHOR:      Gu Weigang
#+EMAIL:       guweigang@outlook.com
#+DATE:        2015-07-17 Fri
#+URI:         /blog/%y/%m/%d/designing-a-programming-language-i
#+KEYWORDS:    programming-language
#+TAGS:        programmin-language
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: 设计一门语言，深入浅出构建解释器。

** 第一回：假设

随着编程语言越来越多，同时也出现了各种不同的范式。即便如此，总体来说编程语言分为两大阵营：静态语言和动态语言。为了避免繁杂的历史问题和任何不必要的进一步分析，本文将会做一系列假设来简化问题。其中一个假设就是静态语言总是会被编译成机器码，动态语言总是在解释器中运行，虽然这不一定是正确的。

验证一门语言是静态的还是动态的更能说明问题。在静态语言中，变量和过程有严格的类型定义。尝试访问一个在作用域中不存在的变量将会导致编译时语法错误。编程语言的结构组成：在解析源代码时，所有变量和函数的位置是由词法地址决定的。即给出相关的作用域范围，就能根据变量定义的顺序找到它。

例如，考虑在 *Visual Basic* 中定义一个变量：

一个简单的示例如下：

#+BEGIN_SRC VB
Dim num1, num2 As Integer
Dim text As String
#+END_SRC 

这是静态语言的变量定义原型。当变量首次声明的时候，必须指定它的类型。与之不同的是，动态语言则不需要，下面是一段ECMA脚本：

#+BEGIN_SRC ECMA
var num1, num2;
var text;
#+END_SRC

在这个示例中，没有为这些变量指定任何类型。 你可以赋予变量 /num1/ 任何类型的值。不仅如此，变量声明过程完全是没有必要的。类型信息存储在值对象中。

除Javascript之外，还有很多流行的动态语言，如：Python, Ruby, Lua, Scheme, Lisp等。除了语法风格和表达角度不一样，其他都非常类似，如一致的类型系统。所以动态类型语言还常常被理解成鸭子类型或鸭子语言。

我们在从头开始设计鸭子语言的时候，会遵循这些共同特性，并且从最基础部分开始构建一门语言只是一个锻炼。在探索的过程中将不考虑实用性和可行性。当我们完成这一过程之后再来考虑这些想法。

在开始之前，我要友好地提醒一下各位读者：接下来的章节可能会包含一些非常复杂的知识，即使我已经尽我所能使用朴素和简单的语言来陈述他们。我建议大家在开始此次『语言设计之旅』之前做一些编程语言设计的调研。那么，咱们开始吧！

** 语法

现在应该很容易就能找到一份关于句法表达式、新手指南、Wiki或者某语言的语法指导的完整文档。先暂时放下这些，继续做更有效的任务。
